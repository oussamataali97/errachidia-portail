<?php

/**
 * @file
 * Functions to support theming in the Boostrap SASS Starter Kit theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Render\MarkupInterface;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\search\SearchPageInterface;
use Drupal\Core\Render\Element\StatusMessages;

/**
 * Implements hook_form_FORM_ID_alter().
 */





function bootstrap_sass_starter_kit_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {

  // Change collapsible fieldsets (now details) to default #open => FALSE.
  $form['theme_settings']['#open'] = FALSE;
  $form['logo']['#open'] = FALSE;
  $form['favicon']['#open'] = FALSE;

  // Vertical tabs.
  $form['bootstrap'] = [
    '#type' => 'vertical_tabs',
    '#prefix' => '<h2><small>' . t('Bootstrap SASS Starter Kit settings') . '</small></h2>',
    '#weight' => -10,
  ];

  

  // Layout.
  $form['layout'] = [
    '#type' => 'details',
    '#title' => t('Layout'),
    '#group' => 'bootstrap',
  ];

  // List of regions.
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $region_list = system_region_list($theme);

  // Wrappers.
  $form['layout']['region'] = [
    '#type' => 'details',
    '#title' => t('Region Wrappers'),
    '#description' => t('Each region allows you to specify: 1) if a container uses a clean wrapper (region__nowrap template suggestion), 2) Option to specify a class (if not using a clean wrapper).'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  foreach ($region_list as $name => $description) {
    if (theme_get_setting('bootstrap_sass_starter_kit_region_clean_' . $name) !== NULL) {
      $region_clean = theme_get_setting('bootstrap_sass_starter_kit_region_clean_' . $name);
    }
    if (theme_get_setting('bootstrap_sass_starter_kit_region_class_' . $name) !== NULL) {
      $region_class = theme_get_setting('bootstrap_sass_starter_kit_region_class_' . $name);
    }
    else {
      $region_class = $region_clean ? NULL : '';
    }

    $form['layout']['region'][$name] = [
      '#type' => 'details',
      '#title' => $description,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    ];
    $form['layout']['region'][$name]['bootstrap_sass_starter_kit_region_clean_' . $name] = [
      '#type' => 'checkbox',
      '#title' => t('Clean wrapper for @description region', ['@description' => $description]),
      '#default_value' => $region_clean,
    ];
    $form['layout']['region'][$name]['bootstrap_sass_starter_kit_region_class_' . $name] = [
      '#states' => [
        'visible' => [
          ':input[name="bootstrap_sass_starter_kit_region_clean_' . $name . '"]' => ['checked' => FALSE],
        ],
      ],
      '#type' => 'textfield',
      '#title' => t('Classes for @description region', ['@description' => $description]),
      '#default_value' => $region_class,
      '#size' => 40,
      '#maxlength' => 40,
    ];
  }

  // Main Content.
  $form['layout']['container'] = [
    '#type' => 'details',
    '#title' => t('Main Content'),
    // '#description' => t('Container size to apply to <code>#main</code> content wrapper in page.tpl.twig.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['layout']['container']['bootstrap_sass_starter_kit_container'] = [
    '#type' => 'select',
    '#title' => t('Container'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_container'),
    '#options' => [
      'container' => t('Container'),
      'container-md' => t('Container Medium'),
      'container-lg' => t('Container Large'),
      'container-xl' => t('Container Extra Large'),
      'container-xxl' => t('Container Extra Extra Large'),
      'container-fluid' => t('Container Fluid'),
    ],
    '#description' => t('Container size to apply to <code>#main</code> content wrapper in page.tpl.twig. See @bootstrap_fluid_containers_link.', [
      '@bootstrap_fluid_containers_link' => Link::fromTextAndUrl(
        'Containers in the Bootstrap 5 documentation',
        Url::fromUri('https://getbootstrap.com/docs/5.3/layout/containers/#how-they-work', [
          'absolute' => TRUE,
          'fragment' => 'containers',
        ]))->toString(),
    ]),
  ];
  $form['layout']['container']['bootstrap_sass_starter_kit_sidebar_position'] = [
    '#type' => 'select',
    '#title' => t('Sidebars position'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_sidebar_position'),
    '#options' => [
      'left' => t('Left'),
      'both' => t('Both sides'),
      'right' => t('Right'),
    ],
  ];
  $form['layout']['container']['bootstrap_sass_starter_kit_content_offset'] = [
    '#type' => 'select',
    '#title' => t('Content offset'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_content_offset'),
    '#options' => [
      0 => t('None'),
      1 => t('1 cols'),
      2 => t('2 cols'),
      3 => t('3 cols'),
      4 => t('4 cols'),
    ],
  ];

  // Sidebar first.
  $form['layout']['sidebar_first'] = [
    '#type' => 'details',
    '#title' => t('Sidebar First'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['layout']['sidebar_first']['bootstrap_sass_starter_kit_sidebar_collapse'] = [
    '#type' => 'checkbox',
    '#title' => t('Sidebar collapse'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_sidebar_collapse'),
  ];
  $form['layout']['sidebar_first']['bootstrap_sass_starter_kit_sidebar_first_width'] = [
    '#type' => 'select',
    '#title' => t('Sidebar first width'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_sidebar_first_width'),
    '#options' => [
      1 => t('1 cols'),
      2 => t('2 cols'),
      3 => t('3 cols'),
      4 => t('4 cols'),
      5 => t('5 cols'),
      6 => t('6 cols'),
    ],
  ];
  $form['layout']['sidebar_first']['bootstrap_sass_starter_kit_sidebar_first_offset'] = [
    '#type' => 'select',
    '#title' => t('Sidebar first offset'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_sidebar_first_offset'),
    '#options' => [
      0 => t('None'),
      1 => t('1 cols'),
      2 => t('2 cols'),
    ],
  ];

  // Sidebar second.
  $form['layout']['sidebar_second'] = [
    '#type' => 'details',
    '#title' => t('Sidebar second'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['layout']['sidebar_second']['bootstrap_sass_starter_kit_sidebar_second_width'] = [
    '#type' => 'select',
    '#title' => t('Sidebar second width'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_sidebar_second_width'),
    '#options' => [
      1 => t('1 cols'),
      2 => t('2 cols'),
      3 => t('3 cols'),
      4 => t('4 cols'),
      5 => t('5 cols'),
      6 => t('6 cols'),
    ],
  ];
  $form['layout']['sidebar_second']['bootstrap_sass_starter_kit_sidebar_second_offset'] = [
    '#type' => 'select',
    '#title' => t('Sidebar second offset'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_sidebar_second_offset'),
    '#options' => [
      0 => t('None'),
      1 => t('1 cols'),
      2 => t('2 cols'),
    ],
  ];

  // Navigation.
  $form['nav'] = [
    '#type' => 'details',
    '#title' => t('Navigation'),
    '#group' => 'bootstrap',
  ];
  $form['nav']['navbar'] = [
    '#type' => 'details',
    '#title' => t('Navbar'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];

  $form['nav']['navbar']['bootstrap_sass_starter_kit_navbar_offcanvas'] = [
    '#type' => 'select',
    '#title' => t('Default/Bootstrap Offcanvas Collapse'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_offcanvas'),
    '#options' => [
      'offcanvas-collapse' => t('Offcanvas'),
    ],
    '#empty_option' => t('Default'),
  ];

  $form['nav']['navbar']['bootstrap_sass_starter_kit_navbar_container'] = [
    '#type' => 'select',
    '#title' => t('Navbar width container'),
    '#description' => t('Check if navbar width will be inside <code>.container</code>. Default <code>.container-fluid</code>.'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_container'),
    '#options' => [
      'container' => t('Container'),
      'container-md' => t('Container Medium'),
      'container-lg' => t('Container Large'),
      'container-xl' => t('Container Extra Large'),
      'container-xxl' => t('Container Extra Extra Large'),
      'container-fluid' => t('Container Fluid'),
    ],
    '#description' => t('See @bootstrap_fluid_containers_link.', [
      '@bootstrap_fluid_containers_link' => Link::fromTextAndUrl(
        'Containers in the Bootstrap 5 documentation',
        Url::fromUri('https://getbootstrap.com/docs/5.3/layout/containers/#how-they-work', [
          'absolute' => TRUE,
          'fragment' => 'containers',
        ]))->toString(),
    ]),
  ];
  $form['nav']['navbar']['bootstrap_sass_starter_kit_navbar_toggle'] = [
    '#type' => 'select',
    '#title' => t('Navbar toggle size'),
    '#description' => t('Select size for navbar to collapse.'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_toggle'),
    '#options' => [
      'navbar-toggleable-xl' => t('Extra Large'),
      'navbar-toggleable-lg' => t('Large'),
      'navbar-toggleable-md' => t('Medium'),
      'navbar-toggleable-sm' => t('Small'),
      'navbar-toggleable-xs' => t('Extra small'),
      'navbar-toggleable-all' => t('All screens'),
    ],
  ];
  $form['nav']['navbar']['bootstrap_sass_starter_kit_navbar_position'] = [
    '#type' => 'select',
    '#title' => t('Navbar position'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_position'),
    '#options' => [
      'fixed-top' => t('Fixed top'),
      'fixed-bottom' => t('Fixed bottom'),
      'sticky-top' => t('Sticky top'),
    ],
    '#empty_option' => t('Normal'),
  ];
  $form['nav']['navbar']['bootstrap_sass_starter_kit_navbar_background'] = [
    '#type' => 'select',
    '#title' => t('Navbar background color'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_background'),
    '#options' => [
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
    ],
    '#empty_option' => t('Default'),
  ];
  $form['nav']['navbar']['bootstrap_sass_starter_kit_navbar_color'] = [
    '#type' => 'select',
    '#title' => t('Navbar link color'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_color'),
    '#options' => [
      'navbar-light' => t('Light'),
      'navbar-dark' => t('Dark'),
    ],
    '#empty_option' => t('Default'),
  ];
  // Allow custom classes on Navbars.
  $form['nav']['navbar']['bootstrap_sass_starter_kit_navbar_class'] = [
    '#type' => 'textfield',
    '#title' => t('Custom classes for Navbar'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_class'),
    '#size' => 40,
    '#maxlength' => 40,
  ];

  // Navbar top.
  $form['nav']['navbar_top'] = [
    '#type' => 'details',
    '#title' => t('Navbar Top'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];

  $form['nav']['navbar_top']['bootstrap_sass_starter_kit_navbar_top_navbar'] = [
    '#type' => 'checkbox',
    '#title' => t('Navbar top is navbar'),
    '#description' => t('Check if navbar top .navbar class should be added.'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_top_navbar'),
  ];
  $form['nav']['navbar_top']['bootstrap_sass_starter_kit_navbar_top_position'] = [
    '#type' => 'select',
    '#title' => t('Navbar top position'),
    '#description' => t('Select your navbar top position.'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_top_position'),
    '#options' => [
      'fixed-top' => t('Fixed top'),
      'fixed-bottom' => t('Fixed bottom'),
      'sticky-top' => t('Sticky top'),
    ],
    '#empty_option' => t('Normal'),
  ];
  $form['nav']['navbar_top']['bootstrap_sass_starter_kit_navbar_top_color'] = [
    '#type' => 'select',
    '#title' => t('Navbar top link color'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_top_color'),
    '#options' => [
      'navbar-light' => t('Light'),
      'navbar-dark' => t('Dark'),
    ],
    '#empty_option' => t('Default'),
  ];
  $form['nav']['navbar_top']['bootstrap_sass_starter_kit_navbar_top_background'] = [
    '#type' => 'select',
    '#title' => t('Navbar top background color'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_top_background'),
    '#options' => [
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
    ],
    '#empty_option' => t('Default'),
  ];
  // Allow custom classes on Navbars.
  $form['nav']['navbar_top']['bootstrap_sass_starter_kit_navbar_top_class'] = [
    '#type' => 'textfield',
    '#title' => t('Custom classes for Navbar Top'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_navbar_top_class'),
    '#size' => 40,
    '#maxlength' => 40,
  ];

  // Components.
  $form['components'] = [
    '#type' => 'details',
    '#title' => t('Components'),
    '#group' => 'bootstrap',
  ];

  // Buttons.
  $form['components']['buttons'] = [
    '#type' => 'details',
    '#title' => t('Buttons'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['components']['buttons']['bootstrap_sass_starter_kit_button'] = [
    '#type' => 'checkbox',
    '#title' => t('Convert input submit to button element'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_button'),
    '#description' => t('There is a known issue where Ajax exposed filters do not if this setting is enabled.'),
  ];
  $form['components']['buttons']['bootstrap_sass_starter_kit_button_type'] = [
    '#type' => 'select',
    '#title' => t('Default button type'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_button_type'),
    '#options' => [
      'primary' => t('Primary'),
      'secondary' => t('Secondary'),
      'success' => t('Success'),
      'info' => t('Info'),
      'warning' => t('Warning'),
      'danger' => t('Danger'),
      'light' => t('Light'),
      'dark' => t('Dark'),
      'link' => t('link'),
    ],
  ];
  $form['components']['buttons']['bootstrap_sass_starter_kit_button_size'] = [
    '#type' => 'select',
    '#title' => t('Default button size'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_button_size'),
    '#empty_option' => t('Normal'),
    '#options' => [
      'btn-sm' => t('Small'),
      'btn-lg' => t('Large'),
    ],
  ];
  $form['components']['buttons']['bootstrap_sass_starter_kit_button_outline'] = [
    '#type' => 'checkbox',
    '#title' => t('Button with outline format'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_button_outline'),
    '#description' => t('Use <code>.btn-default-outline</code> class. See @bootstrap_outline_buttons_link.', [
      '@bootstrap_outline_buttons_link' => Link::fromTextAndUrl(
        'Outline buttons in the Bootstrap 4 documentation',
        Url::fromUri('https://getbootstrap.com/docs/5.2/components/buttons/', [
          'absolute' => TRUE,
          'fragment' => 'outline-buttons',
        ]))->toString(),
    ]),
  ];

  // Images.
  $form['components']['images'] = [
    '#type' => 'details',
    '#title' => t('Images'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['components']['images']['bootstrap_sass_starter_kit_image_fluid'] = [
    '#type' => 'checkbox',
    '#title' => t('Apply img-fluid style to all content images'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_image_fluid'),
    '#description' => t('Adds a img-fluid style to all ".content img" elements'),
  ];

  // Messages.
  $form['components']['alerts'] = [
    '#type' => 'details',
    '#title' => t('Messages'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['components']['alerts']['bootstrap_sass_starter_kit_messages_widget'] = [
    '#type' => 'select',
    '#title' => t('Messages widget'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_messages_widget'),
    '#options' => [
      'default' => t('Alerts classic'),
      'alerts' => t('Alerts bottom'),
      'toasts' => t('Toasts'),
    ],
  ];

  // Form.
  $form['components']['form'] = [
    '#type' => 'details',
    '#title' => t('Form Elements'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];
  $form['components']['form']['bootstrap_sass_starter_kit_float_label'] = [
    '#type' => 'checkbox',
    '#title' => t('Float Labels'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_float_label'),
  ];
  $form['components']['form']['bootstrap_sass_starter_kit_checkbox'] = [
    '#type' => 'select',
    '#title' => t('Checkbox & Radio Style'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_checkbox'),
    '#empty_option' => t('Default'),
    '#options' => [
      'switch' => t('Switch'),
      'button' => t('Button'),
    ],
  ];

  // Scroll Spy.
  $form['scroll_spy'] = [
    '#type' => 'details',
    '#title' => t('Scroll Spy'),
    '#group' => 'bootstrap',
  ];
  $form['scroll_spy']['bootstrap_sass_starter_kit_scroll_spy'] = [
    '#type' => 'textfield',
    '#title' => t('Scrollspy element ID'),
    '#description' => t('Specify a valid jQuery ID for the element containing a .nav that will behave with scrollspy.'),
    '#default_value' => theme_get_setting('bootstrap_sass_starter_kit_scroll_spy'),
    '#size' => 40,
    '#maxlength' => 40,
  ];
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function bootstrap_sass_starter_kit_preprocess_html(&$variables) {
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

  // Scroll Spy info added to body.
  if ($scroll_spy = theme_get_setting('bootstrap_sass_starter_kit_scroll_spy')) {
    $variables['attributes']['data-bs-target'] = $scroll_spy;
    $variables['attributes']['data-bs-spy'] = "scroll";
  }

  // Page specific info.
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'user')) {
    $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && isset($path_args[2]) &&
    $path_args[0] == 'taxonomy' && $path_args[1] == 'term') {
    $variables['attributes']['class'][] = 'page-taxonomy-term-' . $path_args[2];
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($path_args[2]);
    if (!empty($term)) {
      $vocabulary_id = $term->bundle();
      $variables['attributes']['class'][] = 'page-vocabulary-' . Html::cleanCssIdentifier($vocabulary_id);
    }
  }
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id) {
    $variables['attributes']['class'][] = 'page-view-' . Html::cleanCssIdentifier($view_id);
  }

  // SEO Information.
  $http_equiv = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];

}

/**
 * Implements hook_page_attachments_alter() for page templates.
 */
function bootstrap_sass_starter_kit_page_attachments_alter(&$page) {
  $viewport = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function bootstrap_sass_starter_kit_preprocess_page(&$variables) {

  $content_width = 'col';
  $sidebar_first_width = 'col-md-' . theme_get_setting('bootstrap_sass_starter_kit_sidebar_first_width');
  $sidebar_second_width = 'col-md-' . theme_get_setting('bootstrap_sass_starter_kit_sidebar_second_width');

  // Define default classes for containers.
  $variables['navbar_top_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-top'],
  ];
  $variables['navbar_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-main'],
  ];
  $variables['content_attributes'] = [
    'class' => ['main-content', $content_width],
    'id' => ['content'],
  ];
  $variables['sidebar_first_attributes'] = [
    'class' => ['sidebar_first', 'sidebar', $sidebar_first_width],
    'id' => ['sidebar_first'],
  ];
  $variables['sidebar_second_attributes'] = [
    'class' => ['sidebar_second', 'sidebar', $sidebar_second_width],
    'id' => ['sidebar_second'],
  ];

  // add background colour class to navbar_collapse_class as well  
  $variables['navbar_collapse'] = [
    'id' => ['CollapsingNavbar'],
    // 'class' => [theme_get_setting('bootstrap_sass_starter_kit_navbar_background')],
  ];
  // Get custom Navbar classes from config and add them to Navbars.
  if (theme_get_setting('bootstrap_sass_starter_kit_navbar_top_class') !== NULL) {
    $variables['navbar_top_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_top_class');
  }
  if (theme_get_setting('bootstrap_sass_starter_kit_navbar_class') !== NULL) {
    $variables['navbar_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_class');
  }

  switch (theme_get_setting('bootstrap_sass_starter_kit_navbar_offcanvas')) {
    case 'offcanvas-collapse':
      $variables['navbar_offcanvas'] = TRUE;
      $variables['navbar_collapse']['class'][] = "offcanvas";
      $variables['navbar_collapse']['class'][] = "offcanvas-end";
      $variables['navbar_collapse_btn_data'] = "offcanvas";
      $variables['navbar_collapse']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_background');
      break;

    default:
      $variables['navbar_offcanvas'] = FALSE;
      $variables['navbar_collapse']['class'][] = "collapse";
      $variables['navbar_collapse']['class'][] = "navbar-collapse";
      $variables['navbar_collapse_btn_data'] = "collapse";
  }

  // Affix.
  $affix_navbar_top = theme_get_setting('bootstrap_sass_starter_kit_navbar_top_affix');
  $affix_navbar = theme_get_setting('bootstrap_sass_starter_kit_navbar_affix');
  // $affix_sidebar_first = theme_get_setting('bootstrap_sass_starter_kit_sidebar_first_affix');
  // $affix_sidebar_second = theme_get_setting('bootstrap_sass_starter_kit_sidebar_second_affix');
  if ($affix_navbar_top || $affix_navbar) {
    $variables['#attached']['library'][] = 'bootstrap_sass_starter_kit/affix';
    if ($affix_navbar_top) {
      $variables['navbar_top_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_navbar) {
      $variables['navbar_attributes']['data-toggle'] = 'affix';
    }
    // if ($affix_sidebar_first) {
    //   $variables['sidebar_first_attributes']['data-toggle'] = 'affix';
    // }
    // if ($affix_sidebar_second) {
    //   $variables['sidebar_second_attributes']['data-toggle'] = 'affix';
    // }
  }

  // Calculate widths.
  if (theme_get_setting('bootstrap_sass_starter_kit_content_offset')) {
    $variables['content_attributes']['class'][] = 'offset-md-' . theme_get_setting('bootstrap_sass_starter_kit_content_offset');
  }
  if (theme_get_setting('bootstrap_sass_starter_kit_sidebar_first_offset')) {
    $variables['sidebar_first_attributes']['class'][] = 'offset-md-' . theme_get_setting('bootstrap_sass_starter_kit_sidebar_first_offset');
  }
  if (theme_get_setting('bootstrap_sass_starter_kit_sidebar_second_offset')) {
    $variables['sidebar_second_attributes']['class'][] = 'offset-md-' . theme_get_setting('bootstrap_sass_starter_kit_sidebar_second_offset');
  }

  // Define column layout classes.
  switch (theme_get_setting('bootstrap_sass_starter_kit_sidebar_position')) {
    case 'left':
      $variables['sidebar_first_attributes']['class'][] = 'order-4';
      $variables['content_attributes']['class'][] = 'order-3';
      $variables['sidebar_second_attributes']['class'][] = 'order-5';
      break;

    case 'both':
      $variables['sidebar_first_attributes']['class'][] = 'order-1';
      $variables['content_attributes']['class'][] = 'order-3';
      $variables['sidebar_second_attributes']['class'][] = 'order-5';
      break;

    case 'right':
      $variables['sidebar_first_attributes']['class'][] = 'order-1';
      $variables['content_attributes']['class'][] = 'order-3';
      $variables['sidebar_second_attributes']['class'][] = 'order-2';
      break;
  }

  // Define navigation position.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_top_position');
  $variables['navbar_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_position');

  // Define navigation color scheme.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_top_color');
  $variables['navbar_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_color');

  // Define navigation background classes.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_top_background');
  $variables['navbar_attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_navbar_background');

  // Define navigation toggle size.
  switch (theme_get_setting('bootstrap_sass_starter_kit_navbar_toggle')) {
    case 'navbar-toggleable-xl':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-xl';
      break;

    case 'navbar-toggleable-lg':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-lg';
      break;

    case 'navbar-toggleable-md':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;

    case 'navbar-toggleable-sm':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-sm';
      break;

    case 'navbar-toggleable-xs':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-xs';
      break;

    case 'navbar-toggleable-all':
      $variables['navbar_attributes']['class'][] = '';
      break;

    default:
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;
  }

  if (theme_get_setting('bootstrap_sass_starter_kit_sidebar_collapse')) {
    $variables['content_attributes']['class'][] = 'sidebar-offcanvas';
    $variables['sidebar_collapse'] = TRUE;
  }

  // Declare region attributes.
  $variables['navbar_top_attributes'] = new Attribute($variables['navbar_top_attributes']);
  $variables['navbar_attributes'] = new Attribute($variables['navbar_attributes']);
  $variables['navbar_collapse'] = new Attribute($variables['navbar_collapse']);
  $variables['content_attributes'] = new Attribute($variables['content_attributes']);
  $variables['sidebar_first_attributes'] = new Attribute($variables['sidebar_first_attributes']);
  $variables['sidebar_second_attributes'] = new Attribute($variables['sidebar_second_attributes']);

  // Declare container layout.
  $variables['container_navbar'] = theme_get_setting('bootstrap_sass_starter_kit_navbar_container');
  $variables['container'] = theme_get_setting('bootstrap_sass_starter_kit_container');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bootstrap_sass_starter_kit_preprocess_image(&$variables) {
  $img_fluid = theme_get_setting('bootstrap_sass_starter_kit_image_fluid');
  if ($img_fluid) {
    $variables['attributes']['class'][] = 'img-fluid';
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function bootstrap_sass_starter_kit_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function bootstrap_sass_starter_kit_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function bootstrap_sass_starter_kit_preprocess_region(&$variables) {
  // $nowrap = [
  //   'breadcrumb',
  //   'highlighted',
  //   'content',
  //   'primary_menu',
  //   'header',
  //   'sidebar_first',
  //   'sidebar_second',
  // ];
  if (theme_get_setting('bootstrap_sass_starter_kit_region_class_' . $variables['elements']['#region']) !== NULL) {
    $variables['attributes']['class'][] = theme_get_setting('bootstrap_sass_starter_kit_region_class_' . $variables['elements']['#region']);
  }
  // elseif (!in_array($variables['elements']['#region'], $nowrap)) {
  //   $variables['attributes']['class'][] = 'row';
  // }
  if (theme_get_setting('bootstrap_sass_starter_kit_region_clean_' . $variables['elements']['#region']) !== NULL) {
    $variables['clean'] = theme_get_setting('bootstrap_sass_starter_kit_region_clean_' . $variables['elements']['#region']);
  }
  else {
    $variables['clean'] = FALSE;
  }
  $variables['container'] = theme_get_setting('bootstrap_sass_starter_kit_container');

}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function bootstrap_sass_starter_kit_preprocess_block(&$variables) {

  
  if ($variables['base_plugin_id'] == 'system_menu_block' && isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['id'] = $variables['attributes']['id'];
  }
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
  $block = $variables['elements'];
  $blockType = $block['#configuration']['provider'];
  if ($blockType == "block_content") {
    if (isset($block['content']['#block_content']) && ($block['content']['#block_content'] !== NULL)) {
      $bundle = $block['content']['#block_content']->bundle();
      $variables['attributes']['class'][] = 'block-content-' . $bundle;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for form elements.
 */
function bootstrap_sass_starter_kit_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }

  if (theme_get_setting('bootstrap_sass_starter_kit_float_label') &&
        $variables['element']['#type'] != 'radio' &&
        $variables['element']['#type'] != 'checkbox' &&
        $variables['element']['#type'] != 'date' &&
        $variables['element']['#type'] != 'time' &&
        $variables['element']['#type'] != 'search' &&
        $variables['element']['#type'] != 'select' &&
        $variables['element']['#type'] != 'textarea' &&
        $variables['element']['#type'] != 'managed_file') {
    $variables['float_label'] = theme_get_setting('bootstrap_sass_starter_kit_float_label');
    $variables['label_display'] = 'after';
  }

  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }

  if ($variables['element']['#type'] == 'radio' || $variables['element']['#type'] == 'checkbox') {
    switch (theme_get_setting('bootstrap_sass_starter_kit_checkbox')) {
      case 'switch':
        $variables['checkbox_style'] = 'form-switch';
        break;

      case 'button':
        $variables['checkbox_style'] = 'form-button';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function bootstrap_sass_starter_kit_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function bootstrap_sass_starter_kit_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bootstrap_sass_starter_kit_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Taken from http://kristiankaa.dk/article/drupal8-region-specific-menu-theme-hook-suggestion
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], ['', '_'], $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}



/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function bootstrap_sass_starter_kit_preprocess_menu_local_action(&$variables) {
  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for region templates.
 */
function bootstrap_sass_starter_kit_theme_suggestions_region_alter(array &$suggestions, array $variables) {

    if (isset($variables['region'])) {
    // Nettoyer et générer une version sécurisée de la région.
    $region_clean = strtolower(preg_replace('/[^a-z0-9_]+/', '_', $variables['region']));
  } else {
    // Définir une valeur par défaut pour éviter l'erreur.
    $region_clean = 'default_region';
  }
  if (theme_get_setting('bootstrap_sass_starter_kit_region_clean_' . $variables['elements']['#region']) !== NULL) {
   
    $region_clean = theme_get_setting('bootstrap_sass_starter_kit_region_clean_' . $variables['elements']['#region']);
  }
  if ($region_clean === 1) {
    $suggestions[] = 'region__nowrap';
  }
}

function yourtheme_preprocess_views_view_unformatted(&$variables) {
  foreach ($variables['rows'] as &$row) {
    if (isset($row['#row']->_entity->field_image_annonce)) {
      $image_field = $row['#row']->_entity->field_image_annonce->getValue();
      if (!empty($image_field[0]['target_id'])) {
        $file = \Drupal\file\Entity\File::load($image_field[0]['target_id']);
        $row['image_url'] = $file ? file_create_url($file->getFileUri()) : '/path/to/placeholder.jpg';
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bootstrap_sass_starter_kit_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $block = $variables['elements'];
  $blockType = $block['#configuration']['provider'];
  if ($blockType == "block_content") {
    if (isset($block['content']['#block_content']) && ($block['content']['#block_content'] !== NULL)) {
      $bundle = $block['content']['#block_content']->bundle();
      array_splice($suggestions, 2, 0, 'block__block_' . $bundle);
    }
  }
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    $region = $block->getRegion();
    $temp_suggestions = $suggestions;
    if (!empty($temp_suggestions)) {
      foreach($temp_suggestions as $key => $val) { 
        $suggestions[] = $val . '__' . $region;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bootstrap_sass_starter_kit_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  // Define the view mode.
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $user_id = \Drupal::service('current_user')->id();
  $suggestions[] = 'user__' . $sanitized_view_mode;
  $suggestions[] = 'user__' . $user_id;
  $suggestions[] = 'user__' . $user_id . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page template.
 */
function bootstrap_sass_starter_kit_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add a template suggestions for node type.
  /** @var \Drupal\node\NodeInterface $node */
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    $suggestions[] = 'page__node__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 */
function bootstrap_sass_starter_kit_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function bootstrap_sass_starter_kit_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // @todo get from core a variable to flag inline links.
  if (isset($variables['attributes']['class'])) {
    if (in_array('inline', $variables['attributes']['class'])) {
      $suggestions[] = 'links__inline';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for status messages templates.
 */
function bootstrap_sass_starter_kit_theme_suggestions_status_messages_alter(array &$suggestions, array $variables) {
  switch (theme_get_setting('bootstrap_sass_starter_kit_messages_widget')) {
    case 'toasts':
      $suggestions[] = 'status_messages__toasts';
      break;

    case 'alerts':
      $suggestions[] = 'status_messages__alerts';
      break;
  }
}

/**
 * Implements THEME_preprocess_HOOK() for system messages block.
 * 10.3 upgrade now missing status-message theme suggestions
 * and outputs multiple messages on page load.
 * see https://www.drupal.org/project/drupal/issues/3456176
 */
function bootstrap_sass_starter_kit_preprocess_block__system_messages_block(&$variables)
{
  $variables['content'] = StatusMessages::renderMessages();
  $variables['#cache']['max-age'] = 0;
}

/**
 * Implements hook_preprocess_HOOK() for breadcrumb.
 */
function bootstrap_sass_starter_kit_preprocess_breadcrumb(&$variables) {
  // We are creating a variable for the Current Page Title, to allow us to print
  // it after the breadcrumbs loop has run.
  $route_match = \Drupal::routeMatch();
  // Search page titles aren't resolved using the title_resolver service - it
  // will always return 'Search' instead of 'Search for [term]', which would
  // give us a breadcrumb of Home >> Search >> Search.
  // @todo Revisit after https://www.drupal.org/project/drupal/issues/2359901
  // @todo Revisit after https://www.drupal.org/project/drupal/issues/2403359
  $entity = $route_match->getParameter('entity');
  if ($entity instanceof SearchPageInterface) {
    $variables['current_page_title'] = $entity->getPlugin()->suggestedTitle();
  }
  else {
    $variables['current_page_title'] = \Drupal::service('title_resolver')->getTitle(\Drupal::request(), $route_match->getRouteObject());
  }
  // Since we are printing the 'Current Page Title', add the URL cache context.
  // If we don't, then we might end up with something like
  // "Home > Articles" on the Recipes page, which should read "Home > Recipes".
  $variables['#cache']['contexts'][] = 'url';

}

/**
 * Implements hook_preprocess_HOOK() for status_messages.
 */
function bootstrap_sass_starter_kit_preprocess_status_messages(&$variables) {
  $variables['title_ids'] = [];
  if (is_array($variables['message_list'])) {
    foreach ($variables['message_list'] as $message_type => $messages) {
      $variables['title_ids'][$message_type] = Html::getUniqueId("message-$message_type-title");
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function bootstrap_sass_starter_kit_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function bootstrap_sass_starter_kit_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] == 'submit' && theme_get_setting('bootstrap_sass_starter_kit_button')) {
    $suggestions[] = 'input__submit_button';
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function bootstrap_sass_starter_kit_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $container = $variables['element'];
  // suggestions based on paremts if not container.
  if (isset($container['#parents']) && $container['#parents'] != 'container') {
    $suggestions[] = 'container__' . $container['#parents'][0];
  }
  // suggestions based on container type.
  if (isset($container['#type']) && $container['#type'] != 'container') {
    $suggestions[] = 'container__' . $container['#type'];
  }
  // suggestions based on theme suggestions.
  if (isset($container[0]["#theme"])) {
    $themes = $container[0]["#theme"];
    if (!empty($themes)) {
      foreach($themes as $key => $val) { 
        $suggestions[] = 'container__' . $val;
      }
    }
  }
  // suggestions based on children.
  if (isset($container['#type']) && $container['#type'] == 'container' && isset($container['children']['#type'])) {
    $suggestions[] = 'container__' . $container['children']['#type'];
  }
}

/**
 * Implements hook_preprocess().
 */
function bootstrap_sass_starter_kit_preprocess(&$variables, $hook) {
  if (isset($variables['attributes']['class'])) {
    $class = 'is-invalid';

    if (is_object($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class']->value())) {
        $variables['attributes']->addClass($class);
        // If there is a wrapper, add class too.
        if (isset($variables["wrapper_attributes"])) {
          $variables['wrapper_attributes']->addClass($class);
        }
      }
    }
    elseif (is_array($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = $class;
      }
    }
  }
}

/**
 * Implements hook_preprocess_input() for adding classes to inputs.
 */
function bootstrap_sass_starter_kit_preprocess_input(&$variables) {
  // remove size attribute (use css width where necessary).
  unset($variables['element']['#size'], $variables['element']['#attributes']['size'], $variables['attributes']['size']);

  if ($variables['element']['#type'] == 'submit') {
    $button_size = theme_get_setting('bootstrap_sass_starter_kit_button_size');
    $button_types = [
      'btn-primary',
      'btn-secondary',
      'btn-success',
      'btn-warning',
      'btn-danger',
      'btn-link',
    ];
    $button_sizes = ['btn-sm', 'btn-lg'];
    $button_is_outline = theme_get_setting('bootstrap_sass_starter_kit_button_outline');
    $button_type = theme_get_setting('bootstrap_sass_starter_kit_button_type');
    if (is_object($variables['attributes']['class'])) {
      \Drupal::logger('bootstrap_sass_starter_kit')->notice(implode($variables['attributes']['class']->value()));
      if (!in_array('btn', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('btn');
      }
      if (empty(array_intersect($button_types, $variables['attributes']['class']->value()))) {
        if ($button_is_outline) {
          $variables['attributes']['class']->addClass('btn-outline-' . $button_type);
        }
        else {
          $variables['attributes']['class']->addClass('btn-' . $button_type);
        }
      }
      if ($button_size && empty(array_intersect($button_sizes, $variables['attributes']['class']->value()))) {
        $variables['attributes']['class']->addClass($button_size);
      }
    }
    else {
      if (!in_array('btn', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'btn';
      }
      if (empty(array_intersect($button_types, $variables['attributes']['class']))) {
        if ($button_is_outline) {
          $variables['attributes']['class'][] = 'btn-outline-' . $button_type;
        }
        else {
          $variables['attributes']['class'][] = 'btn-' . $button_type;
        }
      }
      if ($button_size && empty(array_intersect($button_sizes, $variables['attributes']['class']))) {
        $variables['attributes']['class'][] = $button_size;
      }
      $variables['attributes'] = new Attribute($variables['attributes']);
    }
    $variables['safe_value_label'] = Xss::filter($variables['attributes']['value'] ?? '');
  }
  if ($variables['element']['#type'] != 'radio' &&
    $variables['element']['#type'] != 'checkbox' &&
    $variables['element']['#type'] != 'date' &&
    $variables['element']['#type'] != 'time' &&
    $variables['element']['#type'] != 'managed_file' &&
    $variables['element']['#type'] != 'select' &&
    $variables['element']['#type'] != 'search' &&
    $variables['element']['#type'] != 'textarea' &&
    theme_get_setting('bootstrap_sass_starter_kit_float_label') &&
    !isset($variables['attributes']['placeholder'])) {
    $variables['attributes']['placeholder'] = $variables['element']['#title'] ?? '';
  }
}

function mytheme_preprocess_page(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() === 'entity.user.canonical') {
    // Unset the default content.
    unset($variables['page']['content']);
  }
}



function your_theme_preprocess_page(&$variables) {
    $query = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'appel_d_offres_cat']);
    $categories = [];

    foreach ($query as $term) {
        $categories[] = $term->getName();
    }

    $variables['categories'] = $categories;
}


/**
 * Implements hook_preprocess_select() for adding classes to select boxes.
 */
function bootstrap_sass_starter_kit_preprocess_select(&$variables) {
  if (isset($variables['attributes']['class'])) {
    if (is_object($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('is-invalid');
      }
    }
    elseif (is_array($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'is-invalid';
      }
    }
  }
}

/**
 * Covert hex to rgb color.
 */
// function _hex2rgb($color) {
//   [$r, $g, $b] = sscanf($color, "#%02x%02x%02x");
//   $output = "$r, $g, $b";
//   return $output;
// }


/**
 * Covert hex to rgba color.
 */
// function _hex2rgba($color, $opacity) {
//   [$r, $g, $b] = sscanf($color, "#%02x%02x%02x");
//   $output = "rgba($r, $g, $b, $opacity)";
//   return $output;
// }
